// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid()) @map("_id") @db.ObjectId
  username      String       @unique
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teamMembers   TeamMember[]
  invitations   Invitation[]
  followers     Follows[]    @relation("following")
  followings    Follows[]    @relation("follower")
  posts         Post[]
  comments      Comment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  likes         Like[]
  bookmarks     Bookmark[]
}

model Team {
  id          String   @id @default(uuid()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  domain      String?  @unique
  defaultRole Role     @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  members     TeamMember[]
  invitations Invitation[]
}

model TeamMember {
  id        String   @id @default(uuid()) @map("_id") @db.ObjectId
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(uuid()) @map("_id") @db.ObjectId
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

// our models
model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  // @@id([followerId, followingId])
}

model Post {
  id            String  @id @default(cuid()) @map("_id") @db.ObjectId
  title         String  @unique
  description   String //@db.Text
  slug          String
  featuredImage String?

  html String //@db.Text
  text String //@db.Text

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  tagIDs    String[]   @db.ObjectId
  tags      Tag[]      @relation(fields: [tagIDs], references: [id])
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  isPublished Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Tag {
  id          String   @id @default(cuid()) @map("_id") @db.ObjectId
  name        String   @unique
  description String? //@db.Text
  slug        String
  postIDs     String[] @db.ObjectId
  posts       Post[]   @relation(fields: [postIDs], references: [id])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  text      String //@db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Like {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
}

model Bookmark {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
}

// model Monitoring {
//   logId        String   @id
//   merchantId   String
//   trxTimestamp DateTime
//   trxAmount    Float
//   appIP        String
//   appName      String
//   requestData  String
//   responseData String
//   status       String
//   statusHttp   Int
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }
